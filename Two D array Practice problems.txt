Here are intermediate-level 2D array problems that build on the basics:

 1. Rotate Matrix 90 Degrees
Rotate a square matrix 90 degrees clockwise in-place.

Input: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]]


 2. Spiral Matrix Traversal
Print all elements of a matrix in spiral order (clockwise from outside to inside).

Input: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
Output: 1, 2, 3, 6, 9, 8, 7, 4, 5


 3. Set Matrix Zeros
If an element is 0, set its entire row and column to 0.

Input: [[1, 1, 1], [1, 0, 1], [1, 1, 1]]
Output: [[1, 0, 1], [0, 0, 0], [1, 0, 1]]


 4. Search in 2D Matrix
Search for a target in a matrix where each row and column is sorted in ascending order.

Input: [[1, 4, 7], [2, 5, 8], [3, 6, 9]], target = 5
Output: Found at position (1, 1)


 5. Island Counting (Connected Components)
Count the number of islands in a binary matrix (1s connected horizontally/vertically form an island).

Input: [[1, 1, 0], [0, 1, 0], [0, 0, 1]]
Output: 2 islands


 6. Matrix Multiplication
Multiply two matrices A and B to get result matrix C.

Input: A = [[1, 2], [3, 4]], B = [[5, 6], [7, 8]]
Output: [[19, 22], [43, 50]]


 7. Find Peak Element
Find a peak element (element that is greater than or equal to its neighbors).

Input: [[1, 3, 2], [4, 8, 6], [2, 5, 1]]
Output: 8 at position (1, 1) - one possible peak


 8. Shortest Path in Binary Matrix
Find shortest path from top-left to bottom-right in a binary matrix (0s are walkable, 1s are obstacles).

Input: [[0, 0, 1], [1, 0, 0], [0, 0, 0]]
Output: Path length = 4


 9. Valid Sudoku Checker
Check if a partially filled 9x9 Sudoku board is valid.

Input: 9x9 grid with numbers 1-9 and empty cells
Output: True/False based on Sudoku rules


 10. Boundary Traversal
Print elements along the boundary of the matrix (perimeter elements only).

Input: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
Output: 1, 2, 3, 4, 8, 12, 11, 10, 9, 5


 Key Concepts These Problems Teach:

- Matrix manipulation (rotation, transposition)
- Multi-directional traversal (spiral, boundary)
- Graph algorithms on grids (DFS/BFS for islands, shortest path)
- In-place modifications (setting zeros, rotation)
- Pattern recognition (peaks, valid configurations)
- Mathematical operations (matrix multiplication)
- Boundary conditions and edge case handling

These problems require more algorithmic thinking and often involve multiple passes through the matrix or more complex traversal patterns. They're excellent preparation for advanced topics like dynamic programming on grids and graph algorithms.